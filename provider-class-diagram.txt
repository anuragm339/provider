classDiagram
    class PipelineManager {
        <<interface>>
        +start() void
        +stop() void
        +submitMessage(Message) CompletableFuture~Long~
        +submitBatch(List~Message~) CompletableFuture~List~Long~~
        +getStatus() PipelineStatus
        +canAccept() boolean
    }

    class DefaultPipelineManager {
        -messageProcessor: MessageProcessor
        -batchProcessor: BatchProcessor
        -messageStore: MessageStore
        -status: AtomicReference~PipelineStatus~
        +submitMessage(Message) CompletableFuture~Long~
        +submitBatch(List~Message~) CompletableFuture~List~Long~~
    }

    class ConsumerRegistry {
        -consumerConnections: Map~String, ConsumerConnection~
        -consumerGroups: Map~String, Set~String~~
        +registerConsumer(connection) void
        +unregisterConsumer(consumerId) void
        +broadcastToGroup(groupId, message) Mono~Void~
    }

    class ConsumerConnection {
        -metadata: ConsumerMetadata
        -rSocket: RSocket
        -active: boolean
        +sendMessage(message) Mono~Void~
        +disconnect() void
    }

    class MessageStore {
        <<interface>>
        +store(Message) CompletableFuture~Long~
        +getMessage(offset) CompletableFuture~Optional~Message~~
        +storeProcessingResult(result) CompletableFuture~Void~
    }

    class BatchProcessor {
        <<interface>>
        +processBatch(List~Message~) CompletableFuture~List~ProcessingResult~~
        +canAcceptBatch(batchSize) boolean
        +getOptimalBatchSize() int
    }

    PipelineManager <|.. DefaultPipelineManager
    DefaultPipelineManager --> BatchProcessor
    DefaultPipelineManager --> MessageStore
    ConsumerRegistry --> ConsumerConnection
    DefaultPipelineManager ..> ConsumerRegistry
